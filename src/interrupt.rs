#[doc = r"Enumeration of all the interrupts"]
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Interrupt {
    #[doc = "3 - NMI"]
    NMI = 3,
    #[doc = "4 - Hard fault interrupt"]
    HARD_FAULT = 4,
    #[doc = "6 - Ecall_M_Mode interrupt"]
    ECALL_M = 6,
    #[doc = "9 - Ecall_U_Mode interrupt"]
    ECALL_U = 9,
    #[doc = "10 - Breakpoint interrupt"]
    BP_HANDLER = 10,
    #[doc = "13 - Systick interrupt"]
    SYSTICK = 13,
    #[doc = "15 - Software interrupt"]
    SWT = 15,
    #[doc = "17 - WWDG interrupt"]
    WWDG = 17,
    #[doc = "18 - PVD interrupt"]
    PVD = 18,
    #[doc = "19 - TAMPER interrupt"]
    TAMPER = 19,
    #[doc = "20 - RTC interrupt"]
    RTC = 20,
    #[doc = "21 - FLASH interrupt"]
    FLASH = 21,
    #[doc = "22 - RCC interrupt"]
    RCC = 22,
    #[doc = "23 - EXTI0 interrupt"]
    EXTI0 = 23,
    #[doc = "24 - EXTI1 interrupt"]
    EXTI1 = 24,
    #[doc = "25 - EXTI2 interrupt"]
    EXTI2 = 25,
    #[doc = "26 - EXTI3 interrupt"]
    EXTI3 = 26,
    #[doc = "27 - EXTI4 interrupt"]
    EXTI4 = 27,
    #[doc = "28 - DMA1_CH1 interrupt"]
    DMA1_CH1 = 28,
    #[doc = "29 - DMA1_CH2 interrupt"]
    DMA1_CH2 = 29,
    #[doc = "30 - DMA1_CH3 interrupt"]
    DMA1_CH3 = 30,
    #[doc = "31 - DMA1_CH4 interrupt"]
    DMA1_CH4 = 31,
    #[doc = "32 - DMA1_CH5 interrupt"]
    DMA1_CH5 = 32,
    #[doc = "33 - DMA1_CH6 interrupt"]
    DMA1_CH6 = 33,
    #[doc = "34 - DMA1_CH7 interrupt"]
    DMA1_CH7 = 34,
    #[doc = "35 - ADC1_2 interrupt"]
    ADC1_2 = 35,
    #[doc = "36 - USB_HP_CAN1_TX interrupt"]
    USB_HP_CAN1_TX = 36,
    #[doc = "37 - USB_LP_CAN1_RX0 interrupt"]
    USB_LP_CAN1_RX0 = 37,
    #[doc = "38 - CAN1_RX1 interrupt"]
    CAN1_RX1 = 38,
    #[doc = "39 - CAN1_SCE interrupt"]
    CAN1_SCE = 39,
    #[doc = "40 - EXTI9_5 interrupt"]
    EXTI9_5 = 40,
    #[doc = "41 - TIM1_BRK interrupt"]
    TIM1_BRK = 41,
    #[doc = "42 - TIM1_UP interrupt"]
    TIM1_UP = 42,
    #[doc = "43 - TIM1_TRG_COM interrupt"]
    TIM1_TRG_COM = 43,
    #[doc = "44 - TIM1_CC interrupt"]
    TIM1_CC = 44,
    #[doc = "45 - TIM2 interrupt"]
    TIM2 = 45,
    #[doc = "46 - TIM3 interrupt"]
    TIM3 = 46,
    #[doc = "47 - TIM4 interrupt"]
    TIM4 = 47,
    #[doc = "48 - I2C1_EV interrupt"]
    I2C1_EV = 48,
    #[doc = "49 - I2C1_ER interrupt"]
    I2C1_ER = 49,
    #[doc = "50 - I2C2_EV interrupt"]
    I2C2_EV = 50,
    #[doc = "51 - I2C2_ER interrupt"]
    I2C2_ER = 51,
    #[doc = "52 - SPI1 interrupt"]
    SPI1 = 52,
    #[doc = "53 - SPI2 interrupt"]
    SPI2 = 53,
    #[doc = "54 - USART1 interrupt"]
    USART1 = 54,
    #[doc = "55 - USART2 interrupt"]
    USART2 = 55,
    #[doc = "56 - USART3 interrupt"]
    USART3 = 56,
    #[doc = "57 - EXTI15_10 interrupt"]
    EXTI15_10 = 57,
    #[doc = "58 - RTCAlarm interrupt"]
    RTCALARM = 58,
    #[doc = "59 - USB Wakeup from suspend interrupt"]
    USB_WUP = 59,
    #[doc = "60 - TIM8_BRK interrupt"]
    TIM8_BRK = 60,
    #[doc = "61 - TIM8_UP interrupt"]
    TIM8_UP = 61,
    #[doc = "62 - TIM8_TRG_COM interrupt"]
    TIM8_TRG_COM = 62,
    #[doc = "63 - TIM8_CC interrupt"]
    TIM8_CC = 63,
    #[doc = "64 - RNG interrupt"]
    RNG = 64,
    #[doc = "65 - FSMC interrupt"]
    FSMC = 65,
    #[doc = "66 - SDIO interrupt"]
    SDIO = 66,
    #[doc = "67 - TIM5 interrupt"]
    TIM5 = 67,
    #[doc = "68 - SPI3 interrupt"]
    SPI3 = 68,
    #[doc = "69 - UART4 interrupt"]
    UART4 = 69,
    #[doc = "70 - UART5 interrupt"]
    UART5 = 70,
    #[doc = "71 - TIM6 interrupt"]
    TIM6 = 71,
    #[doc = "72 - TIM7 interrupt"]
    TIM7 = 72,
    #[doc = "73 - DMA2_CH1 interrupt"]
    DMA2_CH1 = 73,
    #[doc = "74 - DMA2_CH2 interrupt"]
    DMA2_CH2 = 74,
    #[doc = "75 - DMA2_CH3 interrupt"]
    DMA2_CH3 = 75,
    #[doc = "76 - DMA2_CH4 interrupt"]
    DMA2_CH4 = 76,
    #[doc = "77 - DMA2_CH5 interrupt"]
    DMA2_CH5 = 77,
    #[doc = "78 - ETH interrupt"]
    ETH = 78,
    #[doc = "79 - ETH_WKUP interrupt"]
    ETH_WKUP = 79,
    #[doc = "80 - CAN2_TX interrupt"]
    CAN2_TX = 80,
    #[doc = "81 - CAN2_RX0 interrupt"]
    CAN2_RX0 = 81,
    #[doc = "82 - CAN2_RX1 interrupt"]
    CAN2_RX1 = 82,
    #[doc = "83 - CAN2_SCE interrupt"]
    CAN2_SCE = 83,
    #[doc = "84 - OTG_FS interrupt"]
    OTG_FS = 84,
    #[doc = "85 - USBHS_WUP interrupt"]
    USBHS_WUP = 85,
    #[doc = "86 - USBHS interrupt"]
    USBHS = 86,
    #[doc = "87 - DVP interrupt"]
    DVP = 87,
    #[doc = "88 - UART6 interrupt"]
    UART6 = 88,
    #[doc = "89 - UART7 interrupt"]
    UART7 = 89,
    #[doc = "90 - UART8 interrupt"]
    UART8 = 90,
    #[doc = "91 - TIM9_BRK interrupt"]
    TIM9_BRK = 91,
    #[doc = "92 - TIM9_UP interrupt"]
    TIM9_UP = 92,
    #[doc = "93 - TIM9_TRG_COM interrupt"]
    TIM9_TRG_COM = 93,
    #[doc = "94 - TIM9_CC interrupt"]
    TIM9_CC = 94,
    #[doc = "95 - TIM10_BRK interrupt"]
    TIM10_BRK = 95,
    #[doc = "96 - TIM10_UP interrupt"]
    TIM10_UP = 96,
    #[doc = "97 - TIM10_TRG_COM interrupt"]
    TIM10_TRG_COM = 97,
    #[doc = "98 - TIM10_CC interrupt"]
    TIM10_CC = 98,
    #[doc = "99 - DMA2_CH6 interrupt"]
    DMA2_CH6 = 99,
    #[doc = "100 - DMA2_CH7 interrupt"]
    DMA2_CH7 = 100,
    #[doc = "101 - DMA2_CH8 interrupt"]
    DMA2_CH8 = 101,
    #[doc = "102 - DMA2_CH9 interrupt"]
    DMA2_CH9 = 102,
    #[doc = "103 - DMA2_CH10 interrupt"]
    DMA2_CH10 = 103,
    #[doc = "104 - DMA2_CH11 interrupt"]
    DMA2_CH11 = 104,
}
unsafe impl bare_metal::Nr for Interrupt {
    #[inline(always)]
    fn nr(&self) -> u8 {
        *self as u8
    }
}
#[derive(Debug, Copy, Clone)]
pub struct TryFromInterruptError(());
impl Interrupt {
    #[inline]
    pub fn try_from(value: u8) -> Result<Self, TryFromInterruptError> {
        match value {
            3 => Ok(Interrupt::NMI),
            4 => Ok(Interrupt::HARD_FAULT),
            6 => Ok(Interrupt::ECALL_M),
            9 => Ok(Interrupt::ECALL_U),
            10 => Ok(Interrupt::BP_HANDLER),
            13 => Ok(Interrupt::SYSTICK),
            15 => Ok(Interrupt::SWT),

            17 => Ok(Interrupt::WWDG),
            18 => Ok(Interrupt::PVD),
            19 => Ok(Interrupt::TAMPER),
            20 => Ok(Interrupt::RTC),
            21 => Ok(Interrupt::FLASH),
            22 => Ok(Interrupt::RCC),
            23 => Ok(Interrupt::EXTI0),
            24 => Ok(Interrupt::EXTI1),
            25 => Ok(Interrupt::EXTI2),
            26 => Ok(Interrupt::EXTI3),
            27 => Ok(Interrupt::EXTI4),
            28 => Ok(Interrupt::DMA1_CH1),
            29 => Ok(Interrupt::DMA1_CH2),
            30 => Ok(Interrupt::DMA1_CH3),
            31 => Ok(Interrupt::DMA1_CH4),
            32 => Ok(Interrupt::DMA1_CH5),
            33 => Ok(Interrupt::DMA1_CH6),
            34 => Ok(Interrupt::DMA1_CH7),
            35 => Ok(Interrupt::ADC1_2),
            36 => Ok(Interrupt::USB_HP_CAN1_TX),
            37 => Ok(Interrupt::USB_LP_CAN1_RX0),
            38 => Ok(Interrupt::CAN1_RX1),
            39 => Ok(Interrupt::CAN1_SCE),
            40 => Ok(Interrupt::EXTI9_5),
            41 => Ok(Interrupt::TIM1_BRK),
            42 => Ok(Interrupt::TIM1_UP),
            43 => Ok(Interrupt::TIM1_TRG_COM),
            44 => Ok(Interrupt::TIM1_CC),
            45 => Ok(Interrupt::TIM2),
            46 => Ok(Interrupt::TIM3),
            47 => Ok(Interrupt::TIM4),
            48 => Ok(Interrupt::I2C1_EV),
            49 => Ok(Interrupt::I2C1_ER),
            50 => Ok(Interrupt::I2C2_EV),
            51 => Ok(Interrupt::I2C2_ER),
            52 => Ok(Interrupt::SPI1),
            53 => Ok(Interrupt::SPI2),
            54 => Ok(Interrupt::USART1),
            55 => Ok(Interrupt::USART2),
            56 => Ok(Interrupt::USART3),
            57 => Ok(Interrupt::EXTI15_10),
            58 => Ok(Interrupt::RTCALARM),
            59 => Ok(Interrupt::USB_WUP),
            60 => Ok(Interrupt::TIM8_BRK),
            61 => Ok(Interrupt::TIM8_UP),
            62 => Ok(Interrupt::TIM8_TRG_COM),
            63 => Ok(Interrupt::TIM8_CC),
            64 => Ok(Interrupt::RNG),
            65 => Ok(Interrupt::FSMC),
            66 => Ok(Interrupt::SDIO),
            67 => Ok(Interrupt::TIM5),
            68 => Ok(Interrupt::SPI3),
            69 => Ok(Interrupt::UART4),
            70 => Ok(Interrupt::UART5),
            71 => Ok(Interrupt::TIM6),
            72 => Ok(Interrupt::TIM7),
            73 => Ok(Interrupt::DMA2_CH1),
            74 => Ok(Interrupt::DMA2_CH2),
            75 => Ok(Interrupt::DMA2_CH3),
            76 => Ok(Interrupt::DMA2_CH4),
            77 => Ok(Interrupt::DMA2_CH5),
            78 => Ok(Interrupt::ETH),
            79 => Ok(Interrupt::ETH_WKUP),
            80 => Ok(Interrupt::CAN2_TX),
            81 => Ok(Interrupt::CAN2_RX0),
            82 => Ok(Interrupt::CAN2_RX1),
            83 => Ok(Interrupt::CAN2_SCE),
            84 => Ok(Interrupt::OTG_FS),
            85 => Ok(Interrupt::USBHS_WUP),
            86 => Ok(Interrupt::USBHS),
            87 => Ok(Interrupt::DVP),
            88 => Ok(Interrupt::UART6),
            89 => Ok(Interrupt::UART7),
            90 => Ok(Interrupt::UART8),
            91 => Ok(Interrupt::TIM9_BRK),
            92 => Ok(Interrupt::TIM9_UP),
            93 => Ok(Interrupt::TIM9_TRG_COM),
            94 => Ok(Interrupt::TIM9_CC),
            95 => Ok(Interrupt::TIM10_BRK),
            96 => Ok(Interrupt::TIM10_UP),
            97 => Ok(Interrupt::TIM10_TRG_COM),
            98 => Ok(Interrupt::TIM10_CC),
            99 => Ok(Interrupt::DMA2_CH6),
            100 => Ok(Interrupt::DMA2_CH7),
            101 => Ok(Interrupt::DMA2_CH8),
            102 => Ok(Interrupt::DMA2_CH9),
            103 => Ok(Interrupt::DMA2_CH10),
            104 => Ok(Interrupt::DMA2_CH11),
            _ => Err(TryFromInterruptError(())),
        }
    }
}
#[cfg(feature = "rt")]
#[macro_export]
#[doc = r" Assigns a handler to an interrupt"]
#[doc = r""]
#[doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
#[doc = r" function that will be used as the handler of that interrupt. That function"]
#[doc = r" must have signature `fn()`."]
#[doc = r""]
#[doc = r" Optionally, a third argument may be used to declare interrupt local data."]
#[doc = r" The handler will have exclusive access to these *local* variables on each"]
#[doc = r" invocation. If the third argument is used then the signature of the handler"]
#[doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
#[doc = r" passed to the macro."]
#[doc = r""]
#[doc = r" # Example"]
#[doc = r""]
#[doc = r" ``` ignore"]
#[doc = r" interrupt!(TIM2, periodic);"]
#[doc = r""]
#[doc = r" fn periodic() {"]
#[doc = r#"     print!(".");"#]
#[doc = r" }"]
#[doc = r""]
#[doc = r" interrupt!(TIM3, tick, locals: {"]
#[doc = r"     tick: bool = false;"]
#[doc = r" });"]
#[doc = r""]
#[doc = r" fn tick(locals: &mut TIM3::Locals) {"]
#[doc = r"     locals.tick = !locals.tick;"]
#[doc = r""]
#[doc = r"     if locals.tick {"]
#[doc = r#"         println!("Tick");"#]
#[doc = r"     } else {"]
#[doc = r#"         println!("Tock");"#]
#[doc = r"     }"]
#[doc = r" }"]
#[doc = r" ```"]
macro_rules ! interrupt { ( $ NAME : ident , $ path : path , locals : { $ ( $ lvar : ident : $ lty : ty = $ lval : expr ; ) * } ) => { # [ allow ( non_snake_case ) ] mod $ NAME { pub struct Locals { $ ( pub $ lvar : $ lty , ) * } } # [ allow ( non_snake_case ) ] # [ no_mangle ] pub extern "C" fn $ NAME ( ) { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ( $ lvar : $ lval , ) * } ; let f : fn ( & mut self :: $ NAME :: Locals ) = $ path ; f ( unsafe { & mut LOCALS } ) ; } } ; ( $ NAME : ident , $ path : path ) => { # [ allow ( non_snake_case ) ] # [ no_mangle ] pub extern "C" fn $ NAME ( ) { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn ( ) = $ path ; f ( ) ; } } }
