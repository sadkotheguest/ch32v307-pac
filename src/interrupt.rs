#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "16 - Window Watchdog interrupt"]
    WWDG = 16,
    #[doc = "17 - PVD through EXTI line detection interrupt"]
    PVD = 17,
    #[doc = "18 - Tamper interrupt"]
    TAMPER = 18,
    #[doc = "19 - RTC global interrupt"]
    RTC = 19,
    #[doc = "20 - Flash global interrupt"]
    FLASH = 20,
    #[doc = "21 - RCC global interrupt"]
    RCC = 21,
    #[doc = "22 - EXTI Line0 interrupt"]
    EXTI0 = 22,
    #[doc = "23 - EXTI Line1 interrupt"]
    EXTI1 = 23,
    #[doc = "24 - EXTI Line2 interrupt"]
    EXTI2 = 24,
    #[doc = "25 - EXTI Line3 interrupt"]
    EXTI3 = 25,
    #[doc = "26 - EXTI Line4 interrupt"]
    EXTI4 = 26,
    #[doc = "27 - DMA1 Channel1 global interrupt"]
    DMA1_CHANNEL1 = 27,
    #[doc = "28 - DMA1 Channel2 global interrupt"]
    DMA1_CHANNEL2 = 28,
    #[doc = "29 - DMA1 Channel3 global interrupt"]
    DMA1_CHANNEL3 = 29,
    #[doc = "30 - DMA1 Channel4 global interrupt"]
    DMA1_CHANNEL4 = 30,
    #[doc = "31 - DMA1 Channel5 global interrupt"]
    DMA1_CHANNEL5 = 31,
    #[doc = "32 - DMA1 Channel6 global interrupt"]
    DMA1_CHANNEL6 = 32,
    #[doc = "33 - DMA1 Channel7 global interrupt"]
    DMA1_CHANNEL7 = 33,
    #[doc = "34 - ADC global interrupt"]
    ADC = 34,
    #[doc = "35 - CAN1 TX interrupts"]
    USB_HP_CAN1_TX_IRQN = 35,
    #[doc = "36 - CAN1 RX0 interrupts"]
    USB_LP_CAN1_RX0_IRQN = 36,
    #[doc = "37 - CAN1 RX1 interrupt"]
    CAN1_RX1 = 37,
    #[doc = "38 - CAN1 SCE interrupt"]
    CAN1_SCE = 38,
    #[doc = "39 - EXTI Line\\[9:5\\]
interrupts"]
    EXTI9_5 = 39,
    #[doc = "40 - TIM1 Break interrupt"]
    TIM1_BRK = 40,
    #[doc = "41 - TIM1 Update interrupt"]
    TIM1_UP = 41,
    #[doc = "42 - TIM1 Trigger and Commutation interrupts"]
    TIM1_TRG_COM = 42,
    #[doc = "43 - TIM1 Capture Compare interrupt"]
    TIM1_CC = 43,
    #[doc = "44 - TIM2 global interrupt"]
    TIM2 = 44,
    #[doc = "45 - TIM3 global interrupt"]
    TIM3 = 45,
    #[doc = "46 - TIM4 global interrupt"]
    TIM4 = 46,
    #[doc = "47 - I2C1 event interrupt"]
    I2C1_EV = 47,
    #[doc = "48 - I2C1 error interrupt"]
    I2C1_ER = 48,
    #[doc = "49 - I2C2 event interrupt"]
    I2C2_EV = 49,
    #[doc = "50 - I2C2 error interrupt"]
    I2C2_ER = 50,
    #[doc = "51 - SPI1 global interrupt"]
    SPI1 = 51,
    #[doc = "52 - SPI2 global interrupt"]
    SPI2 = 52,
    #[doc = "53 - USART1 global interrupt"]
    USART1 = 53,
    #[doc = "54 - USART2 global interrupt"]
    USART2 = 54,
    #[doc = "55 - USART3 global interrupt"]
    USART3 = 55,
    #[doc = "56 - EXTI Line\\[15:10\\]
interrupts"]
    EXTI15_10 = 56,
    #[doc = "57 - RTC Alarms through EXTI line interrupt"]
    RTCALARM = 57,
    #[doc = "58 - USB Device WakeUp from suspend through EXTI Line Interrupt"]
    USBWAKEUP_IRQN = 58,
    #[doc = "59 - TIM8 Break interrupt"]
    TIM8_BRK = 59,
    #[doc = "60 - TIM8 Update interrupt"]
    TIM8_UP = 60,
    #[doc = "61 - TIM8 Trigger and Commutation interrupts"]
    TIM8_TRG_COM = 61,
    #[doc = "62 - TIM8 Capture Compare interrupt"]
    TIM8_CC = 62,
    #[doc = "63 - RNG interrupt"]
    RNG = 63,
    #[doc = "64 - FSMC global interrupt"]
    FSMC = 64,
    #[doc = "65 - SDIO global interrupt"]
    SDIO = 65,
    #[doc = "66 - TIM5 global interrupt"]
    TIM5 = 66,
    #[doc = "67 - SPI3 global interrupt"]
    SPI3 = 67,
    #[doc = "68 - UART4 global interrupt"]
    UART4 = 68,
    #[doc = "69 - UART5 global interrupt"]
    UART5 = 69,
    #[doc = "72 - DMA2 Channel1 global interrupt"]
    DMA2_CHANNEL1 = 72,
    #[doc = "73 - DMA2 Channel2 global interrupt"]
    DMA2_CHANNEL2 = 73,
    #[doc = "74 - DMA2 Channel3 global interrupt"]
    DMA2_CHANNEL3 = 74,
    #[doc = "75 - DMA2 Channel4 global interrupt"]
    DMA2_CHANNEL4 = 75,
    #[doc = "76 - DMA2 Channel5 global interrupt"]
    DMA2_CHANNEL5 = 76,
    #[doc = "77 - Ethernet global interrupt"]
    ETH = 77,
    #[doc = "78 - Ethernet Wakeup through EXTI line interrupt"]
    ETH_WKUP = 78,
    #[doc = "79 - CAN2 TX interrupts"]
    CAN2_TX = 79,
    #[doc = "80 - CAN2 RX0 interrupts"]
    CAN2_RX0 = 80,
    #[doc = "81 - CAN2 RX1 interrupt"]
    CAN2_RX1 = 81,
    #[doc = "82 - CAN2 SCE interrupt"]
    CAN2_SCE = 82,
    #[doc = "83 - OTG_FS_IRQn"]
    OTG_FS_IRQN = 83,
    #[doc = "84 - USBHSWakeup_IRQn"]
    USBHSWAKEUP_IRQN = 84,
    #[doc = "85 - USBHS_IRQn"]
    USBHS_IRQN = 85,
    #[doc = "86 - DVP global Interrupt interrupt"]
    DVP = 86,
    #[doc = "87 - UART6 global interrupt"]
    UART6 = 87,
    #[doc = "88 - UART7 global interrupt"]
    UART7 = 88,
    #[doc = "89 - UART8 global interrupt"]
    UART8 = 89,
    #[doc = "90 - TIM9 Break interrupt"]
    TIM9_BRK = 90,
    #[doc = "91 - TIM9 Update interrupt"]
    TIM9_UP = 91,
    #[doc = "92 - TIM9 Trigger and Commutation interrupts"]
    TIM9_TRG_COM = 92,
    #[doc = "93 - TIM9 Capture Compare interrupt"]
    TIM9_CC = 93,
    #[doc = "94 - TIM10 Break interrupt"]
    TIM10_BRK = 94,
    #[doc = "95 - TIM10 Update interrupt"]
    TIM10_UP = 95,
    #[doc = "96 - TIM10 Trigger and Commutation interrupts"]
    TIM10_TRG_COM = 96,
    #[doc = "97 - TIM10 Capture Compare interrupt"]
    TIM10_CC = 97,
    #[doc = "98 - DMA2 Channel6 global interrupt"]
    DMA2_CHANNEL6 = 98,
    #[doc = "99 - DMA2 Channel7 global interrupt"]
    DMA2_CHANNEL7 = 99,
    #[doc = "100 - DMA2 Channel8 global interrupt"]
    DMA2_CHANNEL8 = 100,
    #[doc = "101 - DMA2 Channel9 global interrupt"]
    DMA2_CHANNEL9 = 101,
    #[doc = "102 - DMA2 Channel10 global interrupt"]
    DMA2_CHANNEL10 = 102,
    #[doc = "103 - DMA2 Channel11 global interrupt"]
    DMA2_CHANNEL11 = 103,
}
#[doc = r" TryFromInterruptError"]
#[derive(Debug, Copy, Clone)]
pub struct TryFromInterruptError(());
impl Interrupt {
    #[doc = r" Attempt to convert a given value into an `Interrupt`"]
    #[inline]
    pub fn try_from(value: u8) -> Result<Self, TryFromInterruptError> {
        match value {
            16 => Ok(Interrupt::WWDG),
            17 => Ok(Interrupt::PVD),
            18 => Ok(Interrupt::TAMPER),
            19 => Ok(Interrupt::RTC),
            20 => Ok(Interrupt::FLASH),
            21 => Ok(Interrupt::RCC),
            22 => Ok(Interrupt::EXTI0),
            23 => Ok(Interrupt::EXTI1),
            24 => Ok(Interrupt::EXTI2),
            25 => Ok(Interrupt::EXTI3),
            26 => Ok(Interrupt::EXTI4),
            27 => Ok(Interrupt::DMA1_CHANNEL1),
            28 => Ok(Interrupt::DMA1_CHANNEL2),
            29 => Ok(Interrupt::DMA1_CHANNEL3),
            30 => Ok(Interrupt::DMA1_CHANNEL4),
            31 => Ok(Interrupt::DMA1_CHANNEL5),
            32 => Ok(Interrupt::DMA1_CHANNEL6),
            33 => Ok(Interrupt::DMA1_CHANNEL7),
            34 => Ok(Interrupt::ADC),
            35 => Ok(Interrupt::USB_HP_CAN1_TX_IRQN),
            36 => Ok(Interrupt::USB_LP_CAN1_RX0_IRQN),
            37 => Ok(Interrupt::CAN1_RX1),
            38 => Ok(Interrupt::CAN1_SCE),
            39 => Ok(Interrupt::EXTI9_5),
            40 => Ok(Interrupt::TIM1_BRK),
            41 => Ok(Interrupt::TIM1_UP),
            42 => Ok(Interrupt::TIM1_TRG_COM),
            43 => Ok(Interrupt::TIM1_CC),
            44 => Ok(Interrupt::TIM2),
            45 => Ok(Interrupt::TIM3),
            46 => Ok(Interrupt::TIM4),
            47 => Ok(Interrupt::I2C1_EV),
            48 => Ok(Interrupt::I2C1_ER),
            49 => Ok(Interrupt::I2C2_EV),
            50 => Ok(Interrupt::I2C2_ER),
            51 => Ok(Interrupt::SPI1),
            52 => Ok(Interrupt::SPI2),
            53 => Ok(Interrupt::USART1),
            54 => Ok(Interrupt::USART2),
            55 => Ok(Interrupt::USART3),
            56 => Ok(Interrupt::EXTI15_10),
            57 => Ok(Interrupt::RTCALARM),
            58 => Ok(Interrupt::USBWAKEUP_IRQN),
            59 => Ok(Interrupt::TIM8_BRK),
            60 => Ok(Interrupt::TIM8_UP),
            61 => Ok(Interrupt::TIM8_TRG_COM),
            62 => Ok(Interrupt::TIM8_CC),
            63 => Ok(Interrupt::RNG),
            64 => Ok(Interrupt::FSMC),
            65 => Ok(Interrupt::SDIO),
            66 => Ok(Interrupt::TIM5),
            67 => Ok(Interrupt::SPI3),
            68 => Ok(Interrupt::UART4),
            69 => Ok(Interrupt::UART5),
            72 => Ok(Interrupt::DMA2_CHANNEL1),
            73 => Ok(Interrupt::DMA2_CHANNEL2),
            74 => Ok(Interrupt::DMA2_CHANNEL3),
            75 => Ok(Interrupt::DMA2_CHANNEL4),
            76 => Ok(Interrupt::DMA2_CHANNEL5),
            77 => Ok(Interrupt::ETH),
            78 => Ok(Interrupt::ETH_WKUP),
            79 => Ok(Interrupt::CAN2_TX),
            80 => Ok(Interrupt::CAN2_RX0),
            81 => Ok(Interrupt::CAN2_RX1),
            82 => Ok(Interrupt::CAN2_SCE),
            83 => Ok(Interrupt::OTG_FS_IRQN),
            84 => Ok(Interrupt::USBHSWAKEUP_IRQN),
            85 => Ok(Interrupt::USBHS_IRQN),
            86 => Ok(Interrupt::DVP),
            87 => Ok(Interrupt::UART6),
            88 => Ok(Interrupt::UART7),
            89 => Ok(Interrupt::UART8),
            90 => Ok(Interrupt::TIM9_BRK),
            91 => Ok(Interrupt::TIM9_UP),
            92 => Ok(Interrupt::TIM9_TRG_COM),
            93 => Ok(Interrupt::TIM9_CC),
            94 => Ok(Interrupt::TIM10_BRK),
            95 => Ok(Interrupt::TIM10_UP),
            96 => Ok(Interrupt::TIM10_TRG_COM),
            97 => Ok(Interrupt::TIM10_CC),
            98 => Ok(Interrupt::DMA2_CHANNEL6),
            99 => Ok(Interrupt::DMA2_CHANNEL7),
            100 => Ok(Interrupt::DMA2_CHANNEL8),
            101 => Ok(Interrupt::DMA2_CHANNEL9),
            102 => Ok(Interrupt::DMA2_CHANNEL10),
            103 => Ok(Interrupt::DMA2_CHANNEL11),
            _ => Err(TryFromInterruptError(())),
        }
    }
}
#[cfg(feature = "rt")]
#[macro_export]
#[doc = r" Assigns a handler to an interrupt"]
#[doc = r""]
#[doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
#[doc = r" function that will be used as the handler of that interrupt. That function"]
#[doc = r" must have signature `fn()`."]
#[doc = r""]
#[doc = r" Optionally, a third argument may be used to declare interrupt local data."]
#[doc = r" The handler will have exclusive access to these *local* variables on each"]
#[doc = r" invocation. If the third argument is used then the signature of the handler"]
#[doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
#[doc = r" passed to the macro."]
#[doc = r""]
#[doc = r" # Example"]
#[doc = r""]
#[doc = r" ``` ignore"]
#[doc = r" interrupt!(TIM2, periodic);"]
#[doc = r""]
#[doc = r" fn periodic() {"]
#[doc = r#"     print!(".");"#]
#[doc = r" }"]
#[doc = r""]
#[doc = r" interrupt!(TIM3, tick, locals: {"]
#[doc = r"     tick: bool = false;"]
#[doc = r" });"]
#[doc = r""]
#[doc = r" fn tick(locals: &mut TIM3::Locals) {"]
#[doc = r"     locals.tick = !locals.tick;"]
#[doc = r""]
#[doc = r"     if locals.tick {"]
#[doc = r#"         println!("Tick");"#]
#[doc = r"     } else {"]
#[doc = r#"         println!("Tock");"#]
#[doc = r"     }"]
#[doc = r" }"]
#[doc = r" ```"]
macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)]
mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } }